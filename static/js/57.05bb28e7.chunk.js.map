{"version":3,"file":"static/js/57.05bb28e7.chunk.js","mappings":"2OACA,EAAwB,qBAAxB,EAAqD,qB,SCiBrD,EAhBc,SAAH,GAA4F,IAAvFA,EAAQ,EAARA,SAAUC,EAAM,EAANA,OAAQC,EAAW,EAAXA,YAAaC,EAAW,EAAXA,YAAaC,EAAS,EAATA,UAAWC,EAAW,EAAXA,YAAaC,EAAY,EAAZA,aAClF,OACE,mBAAOC,UAAWC,EAAQ,UACvBR,GACD,kCACEO,UAAS,UAAKC,EAAO,YAAIP,EAAOG,GAAa,QAAU,KACnDF,GAAW,IACfO,QAAS,WAAOJ,GAAa,EAC7BK,KAAMN,EACND,YAAaA,KAEdF,EAAOG,KAAc,cAAGG,UAAU,aAAY,SAAEN,EAAOG,GAAWO,SAAWL,GAAgB,gCAGpG,ECfA,EAAwB,qBAAxB,EAA+D,+BAA/D,EAA8G,6BCqD9G,EAjDkB,SAAH,GAAiB,IAAZM,EAAK,EAALA,MAClB,GAOIC,EAAAA,EAAAA,IAAQ,CACVC,KAAM,aAPNC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACAC,EAAQ,EAARA,SACAZ,EAAW,EAAXA,YAAY,EAAD,EACXa,UAAajB,EAAM,EAANA,OAAQkB,EAAO,EAAPA,QACrBC,EAAK,EAALA,MAUIC,EAAe,QACfC,EAAkB,WAClBC,GAAiB,UAAKR,EAASM,EAAgB,CACnDG,UAAU,EACVC,QAAS,CACPC,MAAO,wJACPf,QAAS,mCAGPgB,GAAoB,UAAKZ,EAASO,EAAmB,CACzDE,UAAU,EACVI,UAAWC,EAAAA,GAAAA,IACXC,UAAWD,EAAAA,GAAAA,OAIf,OACI,kBAAMtB,UAAWC,EAASuB,SAAUf,GAtBR,SAACgB,GAC7BpB,EAAMoB,EAAKC,MAAOD,EAAKE,SAAUF,EAAKG,WAAYlB,GAClDG,GACF,IAmB0E,WACtE,SAAC,EAAK,CAACnB,OAAQA,EAAQC,YAAaqB,EAAkBpB,YAAY,QAAQC,UAAWiB,EAAgBhB,YAAaA,EAAY,+BAE9H,SAAC,EAAK,CAACJ,OAAQA,EAAQC,YAAayB,EAAqBxB,YAAY,WAAWC,UAAWkB,EAAmBjB,YAAaA,EAAaC,aAAc8B,EAAAA,GAAAA,eAAsB,kCAE5K,iBAAK7B,UAAWC,EAAkB,WAC9B,oCAAWO,EAAS,eAAa,IAAEL,KAAK,WAAW2B,GAAG,eACtD,kBAAOC,QAAQ,WAAU,6BAE7B,mBAAQ/B,UAAWC,EAAiBE,KAAK,SAAS6B,UAAWpB,EAAQ,mBACpElB,EAAOuC,SAAU,cAAGjC,UAAU,aAAY,SAAEN,EAAOuC,OAAO7B,YAGjE,E,kBC5BA,GAAe8B,EAAAA,EAAAA,KALS,SAACC,GAAK,MAAM,CAClCC,OAAQD,EAAME,KAAKD,OACnBN,GAAIK,EAAME,KAAKP,GAChB,GAEuC,CAACzB,MAAOiC,EAAAA,GAAmBC,OAAQC,EAAAA,IAA3E,EAlBc,SAAH,GAAgC,IAA3BJ,EAAM,EAANA,OAAQN,EAAE,EAAFA,GAAOW,GAAK,YAClC,OAAIL,GACK,SAAC,KAAQ,CAACM,GAAE,UAAKC,EAAAA,GAAAA,QAAiB,YAAIb,MAI7C,4BACE,mCACA,SAAC,GAAS,UAAKW,MAGrB,G","sources":["webpack://react-kabzda-1/./src/components/common/field/field.module.css?bce7","components/common/field/field.jsx","webpack://react-kabzda-1/./src/components/login/login.module.css?e6ba","components/login/login-form.jsx","components/login/login.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"label\":\"field_label__ACZMZ\",\"input\":\"field_input__SvBXP\",\"error\":\"field_error__jOtv7\"};","import s from \"./field.module.css\";\n\nconst Field = ({children, errors, registerObj, placeholder, fieldName, clearErrors, errorMessage}) => {\n  return(\n    <label className={s.label}>\n      {children}\n      <input\n        className={`${s.input} ${errors[fieldName] ? \"error\" : \"\"}`}\n        {...registerObj}\n        onFocus={() => {clearErrors()}}\n        type={fieldName}\n        placeholder={placeholder}\n      ></input>\n      {errors[fieldName] && <p className=\"text-error\">{errors[fieldName].message || errorMessage || \"Please enter a valid data\"}</p>}\n    </label>\n  )\n}\n\nexport default Field;\n","// extracted by mini-css-extract-plugin\nexport default {\"login\":\"login_login__XWvWZ\",\"login__checkbox\":\"login_login__checkbox__cD5y7\",\"login__submit\":\"login_login__submit__+WQSd\"};","import {useForm} from \"react-hook-form\";\nimport { Errors, InputSymbols } from \"../../const\";\nimport Field from \"../common/field/field\";\nimport s from \"./login.module.css\";\n\nconst LoginForm = ({login}) => {\n  const {\n    register,\n    handleSubmit,\n    setError,\n    clearErrors,\n    formState: { errors, isValid },\n    reset,\n  } = useForm({\n    mode: \"onChange\"\n  });\n\n  const FormSubmitClickHandle = (data) => {\n    login(data.email, data.password, data.rememberMe, setError);\n    reset();\n  };\n\n  const fieldEmailName=\"email\";\n  const fieldPasswordName=\"password\";\n  const emailRegisterObj= {...register(fieldEmailName, { \n    required: true,\n    pattern: {\n      value: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n      message: \"Please enter the valid email\"\n    }\n  })};\n  const passwordRegisterObj= {...register(fieldPasswordName, {\n    required: true,\n    minLength: InputSymbols.MIN,\n    maxLength: InputSymbols.MAX\n  })};\n  \n\nreturn(\n    <form className={s.login} onSubmit={handleSubmit(FormSubmitClickHandle)}>\n      <Field errors={errors} registerObj={emailRegisterObj} placeholder=\"Email\" fieldName={fieldEmailName} clearErrors={clearErrors}>Enter your email</Field>\n\n      <Field errors={errors} registerObj={passwordRegisterObj} placeholder=\"Password\" fieldName={fieldPasswordName} clearErrors={clearErrors} errorMessage={Errors.PASSWORD_ERROR}>Enter your password</Field>\n\n      <div className={s.login__checkbox}>\n          <input {...register(\"rememberMe\")} type=\"checkbox\" id=\"remember\"></input>\n          <label htmlFor=\"remember\">Remember me</label>\n      </div>\n      <button className={s.login__submit} type=\"submit\" disabled={!isValid}>Login</button>\n      {errors.server && <p className=\"text-error\">{errors.server.message}</p>}\n    </form>\n  )\n};\n\nexport default LoginForm;\n","import { Navigate } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport {loginThunkCreator, logoutThunkCreator} from \"../../redux/auth-reducer\";\nimport LoginForm from \"./login-form\";\nimport { PathLinks } from \"../../const\";\n\nconst Login = ({isAuth, id, ...props}) => {\n  if (isAuth) {\n    return <Navigate to={`${PathLinks.PROFILE}/${id}`} />\n  }\n\n  return(\n    <div>\n      <h1>Login</h1>\n      <LoginForm {...props} />\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  isAuth: state.auth.isAuth,\n  id: state.auth.id\n})\n\nexport default connect(mapStateToProps, {login: loginThunkCreator, logout: logoutThunkCreator})(Login);"],"names":["children","errors","registerObj","placeholder","fieldName","clearErrors","errorMessage","className","s","onFocus","type","message","login","useForm","mode","register","handleSubmit","setError","formState","isValid","reset","fieldEmailName","fieldPasswordName","emailRegisterObj","required","pattern","value","passwordRegisterObj","minLength","InputSymbols","maxLength","onSubmit","data","email","password","rememberMe","Errors","id","htmlFor","disabled","server","connect","state","isAuth","auth","loginThunkCreator","logout","logoutThunkCreator","props","to","PathLinks"],"sourceRoot":""}